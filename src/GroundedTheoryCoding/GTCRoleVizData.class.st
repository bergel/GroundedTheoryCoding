Class {
	#name : #GTCRoleVizData,
	#superclass : #Object,
	#category : #'GroundedTheoryCoding-RoleViz'
}

{ #category : #'as yet unclassified' }
GTCRoleVizData >> fullTranscriptAsCSV [

^ 'Timestamp,Please provide your participant ID?,Did RoleViz help you to complete the task? Please describe your thoughts briefly.,Please name the view(s) you like the most in RoleViz and briefly motivate your choice,"In addition to the features currently available in RoleViz, what other features would you like RoleViz to have?","Do you have any suggestions for improvements (e.g. to the UI elements, layouts, etc.) in RoleViz?","Is the experiment time distributed reasonably between different parts? Do you wish any changes (please choose ""Other"" and explain)? ","Are the tasks reasonable within the given time? Do you wish any changes (please choose ""Other"" and explain)?","Is the case (K-9) manageable? Do you wish any changes (please choose ""Other"" and explain)?"
1/23/2019 14:53:53,p2_manuel,I think it gave a clear view and I liked the search function that only displayed relevant classes/methods.,"I liked the the circle (Package Interaction View) since you could see the lines going clearly to the other rows of classes, a bit easier to navigate than the first view.",I would like the source code tab to be structured like a sublime/visual studio so you could search it more easily. ,"A frontend/UX designer could maybe help improving the UI, making it more attractive and user-friendly. Don''t really know what to improve more that aesthetics.  + if it does not crash is also good. ",No,I think 1.5 h is required for the whole experiment without it being rushed. ,I think 1.5 h is required for the whole experiment without it being rushed. 
1/24/2019 10:16:02,p3_johan,"Yes. I could have done it as well on a file structure. I did not use most functionality that is available on RoleViz (role, association) - the task does not require me to use those functionalities.","For this task, the Package view was the best - I don''t want more details rather than package and classes - and the role is available via the color.","The source code - formatting, some color, some markups.
The method list.","The source code need to be better formatted.
The question mark (legend) was not visible at all for some reasons. 
The inspect function should be improved. Alternative: when filtering out classes/packages, you could switch to inspect mode automatically.",Yes,Yes,Yes
1/24/2019 12:03:40,p4_abdullah,It helped. It was easier to use that tool to comprehend the system comparing to browsing on the source code - the navigation was easier and the connection between classes are more visible. I like that I can always see connection  between classes and focus on the classes/association that I like.,"Package Interaction View - show everything; also the dependencies sub-views. The possibility to see the source code and search on it. Comparing to the other tool (Softagram) where the code is not integrated, it was easier.","Dependencies at the method level, references to the methods (like Softagram, VS). ","The look of the software: Animation is needed - e.g. when I hover or want to focus on a package and their related packages, the view should automatically be  changed/resized/adjusted to only show those packages. ",Yes,Yes,"The case looks big, it could be harder without the help of these tools."
1/24/2019 14:09:18,p1_sinan,"Yes. I used a top-down approach - The roles help to identify the starting point (in this case, it''s the Coordinator that I looked the first). ","Role Interaction - that was the only one that I used (saw the demo video). Using this, I can define the role and the starting point easier. The visual of association could give me an essence about the structure of the system.","More visualization for paths and other dependencies between classes (such as method calls, references, ....) and the ability to filter them. Referencing within the source code (markups).",the UI is not so friendly - I like a code editor over a simple code. Browsing: Referencing back and forth between code and graph.,Yes,Yes,Yes
1/25/2019 11:01:12,p5_gustav,"Yes, it did. It was hard when you have to search for a string - you don''t know what''s class is called. When I got the search right, I can easily locate the related parts of source code, both source code and dependency views make it easier to direct/navigate between relevant classes.",I like the class view which contains subviews such as source code and dependency view. I took a look into Package Interaction view only.,"The dependency view: Show incoming and out-going (arrow, left/right parts); Implement an approximate search which can look up for classes that are closely related to a search string. ",NO.,Yes,I would like some more time to understand more (program flow) - 30 minutes in total.,Yes
1/28/2019 10:32:38,p6_max,Comparing to having no tool - it is helpful. The split up of the role is very good. Looking at it is essentially another search filter for me - the role. ,"Role Interaction - the separation of the role was the most helpful, I don''t really look into the interaction. ",Simple syntax highlighting could be very useful. Program flow at the method level. The overall responsiveness (e.g. delay when scrolling) should be improved.,The inspect function should be improved: show only the matched elements and relayout when needed. ,Yes,Yes,Yes
1/29/2019 18:46:28,p12_yazen,"Yes. I have only short time for comprehension, RoleViz provideed a good overall view of the system and different components of the system.",Role Interaction - split into separated roles. ,"Add methods to the main view, format the source code.","extends on the search function; to better manage the extension of sub-views (once you open new subview, you cannot go back to the visualisation without closing all the subview).",No,Yes,not sure
2/4/2019 11:03:07,p7_muke,"Yes, it did. I was about to easily locate which files I needed to change by an easy search and easy visulaisation on what I needed to look at (does not provide too much information than needed).","I only used the package interaction, I liked Inspect function.",Method-level view of the calls,"There are advantages and disadvantages of showing methods inside class. If there is a way to enable or to disable the view (when hovering, you can maybe see a pop up that contains method names...).",Yes,Yes,Yes
2/4/2019 12:39:49,p13_magnus,"Not really, being unfamiliar with the Role stereotype, I had to ""transplant""my understanding of Android app source structure to use this. E.g. I knew that a Fragment was the relevant base class of what I was looking for.",I only used Package interaction - so no other choices.,I could be nice to be able to see the package-based hierachy and seeing the roles in parallel - it enables to compare the package and role.,The name was tiny and overlapped when zooming in.,"Yes, should mention: how critical is this to look the videos before the experiment.",Yes,This case is managable but I have knowledge about Anroid app and its structure - I was confident because of that.
2/4/2019 14:29:58,p8_mazen,"Yes, partially. I think it is good that it classifies the roles of the classes for me, so I have an instant idea of what a class does (even before I read its name)",Role Interaction view: it classified all classes into very logical class roles; Class detailed views: Source & Dependencies - I want to see the source code and workflow besides the graph.  ,No.,"1) Dependencies view: show type of the associations and direct to the related source code when clicking on dependency links; When you visualize things, show icons instead of colors (I always forget the colors and had to check the legend all the time). 2) The colors somehow give wrong impression: e.g. red might relate to something wrong - Use more neutral colors. 3) The associations were not go when filtering out corresponding classes - they are misleading.",Yes,"Yes, but I would prefer more time for the comprehension task, maybe 10 more mins for each.",Yes
2/6/2019 15:01:45,p9_dimitrios,"Yes, especilly when I looked for attachment, filtered out everything that is not relevant, and I just followed the color code of role to get to the exact class.",I like Inspect function. I only used the package interaction view.,In dependencies view: I would like the incoming call & calls at method level. ,"The option of filtering are misleading (highlight should not necessarily be different from filter_out...) + some better highlighting strategies.
The question mark should be more visible - a more prominent place.",Yes,Yes,Yes
2/7/2019 12:09:13,p14_daniel,"The search function was useful as it allowed me to get a quick overview on relevant classes. I didn""t use the other features so much.",Package Interaction,"In the text editor: link source code elements back to graphical elements. Jump between source code elements. Support for method level. Full project text search, including the contents of source code. Integration with an IDE to reuse its source code browsing features (reverse search etc.)","Syntax highlighting, filtering function: better search mechanisms. Always was confused by quotation marks in strings or not.",Yes,Yes,Yes
2/7/2019 19:09:14,p11_berima,The tool helps me to locate the right source code to change. The roles help me to narrow down on specific types of functionality whiles I am searching for the source code. The ability to abstract away parts of the source code reduces the mental load during the task.,"Role Interactions, Package View, Package Interactions",Ability to hide all source code but the one that matches the search (source code view).,"When Inspecting, shrinking down the package to fit only the classes that are left from the search, all other grey classes could go. Source code highlighting.",Yes,I would expect a bit longer: 20 mins,Yes
2/12/2019 12:17:41,p10_joel,Yes. The highlighting of the filtered elements is the key part that helped me to scope down quickly to the relevant classes/packages. I think it is nice to have the source code and the graphics together. ,Package Interaction + source code views.,- Call graph at method and attribute level,"- Syntax Highlighter.
- Sync between package view and source views (relocate on the package view when clicking on one specific class in source code view)",Yes,Yes,Yes
2/12/2019 14:52:41,p15_kosara,"Yes. Before started looking at the system, I knew already the roles that I wanted to search for, and then I could scope the search better. It was very useful to see dependencies of a class, so that I can trace on those to understand the workflow.",Role Interaction view helped me the most. I knew the roles I was interested in.,Syntax highlighting; ,"The size of source code might be relevant; 
External behaviors should have it own area/representation (circle or round shapes).",Yes,Yes,Yes
2/14/2019 11:22:15,p16_sina,Yes. I can trace different things by visualisation components (having search methods -> the visualisation part - trace link -> code).,"I looked into PackageInteraction. My plan, as a beginner, was not looking into the architecture level, but was looking into the association and reading source code to understand basic workflow. ","I want more advanced search methods: for example, search on function name, class name, method name, or association between classes (don''t just show the classes that match the search, but also show the related classes); ","- when I click inspect, some packages that did not match my search string still pertained.
- I could not understand the arrow. Might think of different types of association regarding different levels of architecture: e.g. how much of the association between two classes/packages are related to data exchange, method-calls, import. ",Yes,Yes,Yes'
]

{ #category : #tools }
GTCRoleVizData >> transcript [

^ '$p2_manuel
+ search function that only displayed relevant classes/methods
+ the circle layout
- source code tab can be better (like in sublime)
- UX can be improved. 

$p3_johan
- role and associations are not useful. But he used the role in the package view
- source code tab can be better
- method list
- help not visible

$p4_abdullah
+ navigation easier with RoleViz 
+ association between classes more visible 
- code search in softagram is not integrated
- method call graph

$p1_sinan
+ roles help to identify the start point. Looked at coordinator first
+ role interaction
- method call graph
- UI
- sync source visualization

$p6_max
+ role
+ dependency
- need of syntax highlighting
- method call graph
- inspecting could be improved


$p12_yazen
+ good overview with different components
+ role
- source code formating
- add methods to the main view
- method call graph
- UI 

$p7_muke
+ easy search
+ easy visualization
+ inspect
- method call graph
- method names

$p13_magnus
- RoleViz not helpful
- overlapping of names when zooming

$p8_mazen
+ role classification
+ have an idea of what a class does, before reading its name
+ role interaction view
+ class detailed views: source and dependencies
- use of red color

$p9_dimitrios
+ filtering
+ role color
+ inspect
+ method call graph
- misleading filtering option
- highlighting source code
- help should be more visible

$p14_daniel
+ search function
- link between source code and graphical elements
- method call graph
- integration with an IDE
- syntax highlighting
- filtering function
- search

$p11_berima
+ role to narrow down
+ filtering
+ role interaction
- filtering on source code
- source code highlighting

$p10_joel
+ highlighting
+ source code
+ package interaction
- method call graph
- access to attributes
- syntax highlight
- sync package view and source code

$p15_kosara
+ role
+ scope search
+ role interaction
- syntax highlight
- external behavior

$p16_sina
+ trace
+ search
- search
- method call graph
'
]
